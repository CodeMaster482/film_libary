// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/film/film.go

// Package mock_film is a generated GoMock package.
package mock_film

import (
	context "context"
	model "films_library/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// AddFilm mocks base method.
func (m *MockUsecase) AddFilm(ctx context.Context, film model.AddFilmRequest) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilm", ctx, film)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFilm indicates an expected call of AddFilm.
func (mr *MockUsecaseMockRecorder) AddFilm(ctx, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilm", reflect.TypeOf((*MockUsecase)(nil).AddFilm), ctx, film)
}

// DeleteFilm mocks base method.
func (m *MockUsecase) DeleteFilm(ctx context.Context, id uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", ctx, id)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockUsecaseMockRecorder) DeleteFilm(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockUsecase)(nil).DeleteFilm), ctx, id)
}

// GetFilm mocks base method.
func (m *MockUsecase) GetFilm(ctx context.Context, id uint64) (model.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilm", ctx, id)
	ret0, _ := ret[0].(model.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilm indicates an expected call of GetFilm.
func (mr *MockUsecaseMockRecorder) GetFilm(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilm", reflect.TypeOf((*MockUsecase)(nil).GetFilm), ctx, id)
}

// GetFilms mocks base method.
func (m *MockUsecase) GetFilms(ctx context.Context, filter model.FilmFilter) ([]model.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilms", ctx, filter)
	ret0, _ := ret[0].([]model.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilms indicates an expected call of GetFilms.
func (mr *MockUsecaseMockRecorder) GetFilms(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilms", reflect.TypeOf((*MockUsecase)(nil).GetFilms), ctx, filter)
}

// SearchFilm mocks base method.
func (m *MockUsecase) SearchFilm(ctx context.Context, search string) ([]model.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilm", ctx, search)
	ret0, _ := ret[0].([]model.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFilm indicates an expected call of SearchFilm.
func (mr *MockUsecaseMockRecorder) SearchFilm(ctx, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilm", reflect.TypeOf((*MockUsecase)(nil).SearchFilm), ctx, search)
}

// UpdateFilm mocks base method.
func (m *MockUsecase) UpdateFilm(ctx context.Context, film model.Film) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", ctx, film)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockUsecaseMockRecorder) UpdateFilm(ctx, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockUsecase)(nil).UpdateFilm), ctx, film)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddFilm mocks base method.
func (m *MockRepository) AddFilm(ctx context.Context, film model.AddFilmRequest) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilm", ctx, film)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFilm indicates an expected call of AddFilm.
func (mr *MockRepositoryMockRecorder) AddFilm(ctx, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilm", reflect.TypeOf((*MockRepository)(nil).AddFilm), ctx, film)
}

// DeleteFilm mocks base method.
func (m *MockRepository) DeleteFilm(ctx context.Context, id uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", ctx, id)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockRepositoryMockRecorder) DeleteFilm(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockRepository)(nil).DeleteFilm), ctx, id)
}

// GetFilm mocks base method.
func (m *MockRepository) GetFilm(ctx context.Context, id uint64) (model.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilm", ctx, id)
	ret0, _ := ret[0].(model.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilm indicates an expected call of GetFilm.
func (mr *MockRepositoryMockRecorder) GetFilm(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilm", reflect.TypeOf((*MockRepository)(nil).GetFilm), ctx, id)
}

// GetFilms mocks base method.
func (m *MockRepository) GetFilms(ctx context.Context, filter model.FilmFilter) ([]model.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilms", ctx, filter)
	ret0, _ := ret[0].([]model.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilms indicates an expected call of GetFilms.
func (mr *MockRepositoryMockRecorder) GetFilms(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilms", reflect.TypeOf((*MockRepository)(nil).GetFilms), ctx, filter)
}

// SearchFilm mocks base method.
func (m *MockRepository) SearchFilm(ctx context.Context, search string) ([]model.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilm", ctx, search)
	ret0, _ := ret[0].([]model.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFilm indicates an expected call of SearchFilm.
func (mr *MockRepositoryMockRecorder) SearchFilm(ctx, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilm", reflect.TypeOf((*MockRepository)(nil).SearchFilm), ctx, search)
}

// UpdateFilm mocks base method.
func (m *MockRepository) UpdateFilm(ctx context.Context, film model.Film) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", ctx, film)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockRepositoryMockRecorder) UpdateFilm(ctx, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockRepository)(nil).UpdateFilm), ctx, film)
}
