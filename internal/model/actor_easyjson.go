// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1a61c37dDecodeFilmsLibraryInternalModel(in *jlexer.Lexer, out *ResponseActor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "actor_id":
			out.ActorID = uint(in.Uint())
		case "name":
			out.Name = string(in.String())
		case "sex":
			out.Sex = string(in.String())
		case "birth_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BirthDate).UnmarshalJSON(data))
			}
		case "film":
			if in.IsNull() {
				in.Skip()
				out.Films = nil
			} else {
				in.Delim('[')
				if out.Films == nil {
					if !in.IsDelim(']') {
						out.Films = make([]FilmObj, 0, 2)
					} else {
						out.Films = []FilmObj{}
					}
				} else {
					out.Films = (out.Films)[:0]
				}
				for !in.IsDelim(']') {
					var v1 FilmObj
					(v1).UnmarshalEasyJSON(in)
					out.Films = append(out.Films, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a61c37dEncodeFilmsLibraryInternalModel(out *jwriter.Writer, in ResponseActor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"actor_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ActorID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"sex\":"
		out.RawString(prefix)
		out.String(string(in.Sex))
	}
	{
		const prefix string = ",\"birth_date\":"
		out.RawString(prefix)
		out.Raw((in.BirthDate).MarshalJSON())
	}
	{
		const prefix string = ",\"film\":"
		out.RawString(prefix)
		if in.Films == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Films {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseActor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a61c37dEncodeFilmsLibraryInternalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseActor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a61c37dEncodeFilmsLibraryInternalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseActor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a61c37dDecodeFilmsLibraryInternalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseActor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a61c37dDecodeFilmsLibraryInternalModel(l, v)
}
func easyjson1a61c37dDecodeFilmsLibraryInternalModel1(in *jlexer.Lexer, out *FilmObj) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "film_id":
			out.Id = uint(in.Uint())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a61c37dEncodeFilmsLibraryInternalModel1(out *jwriter.Writer, in FilmObj) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Id))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmObj) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a61c37dEncodeFilmsLibraryInternalModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmObj) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a61c37dEncodeFilmsLibraryInternalModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmObj) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a61c37dDecodeFilmsLibraryInternalModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmObj) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a61c37dDecodeFilmsLibraryInternalModel1(l, v)
}
func easyjson1a61c37dDecodeFilmsLibraryInternalModel2(in *jlexer.Lexer, out *Actor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "sex":
			out.Sex = string(in.String())
		case "birth_date":
			out.BirthDate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a61c37dEncodeFilmsLibraryInternalModel2(out *jwriter.Writer, in Actor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"sex\":"
		out.RawString(prefix)
		out.String(string(in.Sex))
	}
	{
		const prefix string = ",\"birth_date\":"
		out.RawString(prefix)
		out.String(string(in.BirthDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Actor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a61c37dEncodeFilmsLibraryInternalModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Actor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a61c37dEncodeFilmsLibraryInternalModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Actor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a61c37dDecodeFilmsLibraryInternalModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Actor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a61c37dDecodeFilmsLibraryInternalModel2(l, v)
}
