// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson14b8084aDecodeFilmsLibraryInternalModel(in *jlexer.Lexer, out *FilmFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SortBy":
			out.SortBy = string(in.String())
		case "SortOrder":
			out.SortOrder = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeFilmsLibraryInternalModel(out *jwriter.Writer, in FilmFilter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SortBy\":"
		out.RawString(prefix[1:])
		out.String(string(in.SortBy))
	}
	{
		const prefix string = ",\"SortOrder\":"
		out.RawString(prefix)
		out.String(string(in.SortOrder))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeFilmsLibraryInternalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeFilmsLibraryInternalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeFilmsLibraryInternalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeFilmsLibraryInternalModel(l, v)
}
func easyjson14b8084aDecodeFilmsLibraryInternalModel1(in *jlexer.Lexer, out *Film) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "film_id":
			out.ID = uint64(in.Uint64())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "release_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ReleaseDate).UnmarshalJSON(data))
			}
		case "rating":
			out.Rating = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeFilmsLibraryInternalModel1(out *jwriter.Writer, in Film) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"release_date\":"
		out.RawString(prefix)
		out.Raw((in.ReleaseDate).MarshalJSON())
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Film) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeFilmsLibraryInternalModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Film) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeFilmsLibraryInternalModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Film) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeFilmsLibraryInternalModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Film) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeFilmsLibraryInternalModel1(l, v)
}
func easyjson14b8084aDecodeFilmsLibraryInternalModel2(in *jlexer.Lexer, out *AddFilmRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "release_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ReleaseDate).UnmarshalJSON(data))
			}
		case "rating":
			out.Rating = int(in.Int())
		case "actors":
			if in.IsNull() {
				in.Skip()
				out.Actors = nil
			} else {
				in.Delim('[')
				if out.Actors == nil {
					if !in.IsDelim(']') {
						out.Actors = make([]uint, 0, 8)
					} else {
						out.Actors = []uint{}
					}
				} else {
					out.Actors = (out.Actors)[:0]
				}
				for !in.IsDelim(']') {
					var v1 uint
					v1 = uint(in.Uint())
					out.Actors = append(out.Actors, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeFilmsLibraryInternalModel2(out *jwriter.Writer, in AddFilmRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"release_date\":"
		out.RawString(prefix)
		out.Raw((in.ReleaseDate).MarshalJSON())
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	{
		const prefix string = ",\"actors\":"
		out.RawString(prefix)
		if in.Actors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Actors {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Uint(uint(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddFilmRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeFilmsLibraryInternalModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddFilmRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeFilmsLibraryInternalModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddFilmRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeFilmsLibraryInternalModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddFilmRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeFilmsLibraryInternalModel2(l, v)
}
