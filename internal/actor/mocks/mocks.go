// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/actor/actor.go

// Package mock_actor is a generated GoMock package.
package mock_actor

import (
	context "context"
	model "films_library/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// AddActor mocks base method.
func (m *MockUsecase) AddActor(ctx context.Context, actor *model.Actor) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActor", ctx, actor)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddActor indicates an expected call of AddActor.
func (mr *MockUsecaseMockRecorder) AddActor(ctx, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActor", reflect.TypeOf((*MockUsecase)(nil).AddActor), ctx, actor)
}

// CheckActors mocks base method.
func (m *MockUsecase) CheckActors(ctx context.Context, actors []uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckActors", ctx, actors)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckActors indicates an expected call of CheckActors.
func (mr *MockUsecaseMockRecorder) CheckActors(ctx, actors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckActors", reflect.TypeOf((*MockUsecase)(nil).CheckActors), ctx, actors)
}

// DeleteActor mocks base method.
func (m *MockUsecase) DeleteActor(ctx context.Context, actorID uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", ctx, actorID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockUsecaseMockRecorder) DeleteActor(ctx, actorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockUsecase)(nil).DeleteActor), ctx, actorID)
}

// GetActors mocks base method.
func (m *MockUsecase) GetActors(ctx context.Context) ([]model.ResponseActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors", ctx)
	ret0, _ := ret[0].([]model.ResponseActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockUsecaseMockRecorder) GetActors(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockUsecase)(nil).GetActors), ctx)
}

// UpdateActor mocks base method.
func (m *MockUsecase) UpdateActor(ctx context.Context, actor *model.Actor) (*model.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", ctx, actor)
	ret0, _ := ret[0].(*model.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockUsecaseMockRecorder) UpdateActor(ctx, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockUsecase)(nil).UpdateActor), ctx, actor)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddActor mocks base method.
func (m *MockRepository) AddActor(ctx context.Context, actor *model.Actor) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActor", ctx, actor)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddActor indicates an expected call of AddActor.
func (mr *MockRepositoryMockRecorder) AddActor(ctx, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActor", reflect.TypeOf((*MockRepository)(nil).AddActor), ctx, actor)
}

// CheckActor mocks base method.
func (m *MockRepository) CheckActor(ctx context.Context, actor uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckActor", ctx, actor)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckActor indicates an expected call of CheckActor.
func (mr *MockRepositoryMockRecorder) CheckActor(ctx, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckActor", reflect.TypeOf((*MockRepository)(nil).CheckActor), ctx, actor)
}

// DeleteActor mocks base method.
func (m *MockRepository) DeleteActor(ctx context.Context, actorID uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", ctx, actorID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockRepositoryMockRecorder) DeleteActor(ctx, actorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockRepository)(nil).DeleteActor), ctx, actorID)
}

// GetActor mocks base method.
func (m *MockRepository) GetActor(ctx context.Context, actorID uint) (model.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActor", ctx, actorID)
	ret0, _ := ret[0].(model.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActor indicates an expected call of GetActor.
func (mr *MockRepositoryMockRecorder) GetActor(ctx, actorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockRepository)(nil).GetActor), ctx, actorID)
}

// GetActors mocks base method.
func (m *MockRepository) GetActors(ctx context.Context) ([]model.ResponseActor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors", ctx)
	ret0, _ := ret[0].([]model.ResponseActor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockRepositoryMockRecorder) GetActors(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockRepository)(nil).GetActors), ctx)
}

// UpdateActor mocks base method.
func (m *MockRepository) UpdateActor(ctx context.Context, actor *model.Actor) (*model.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", ctx, actor)
	ret0, _ := ret[0].(*model.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockRepositoryMockRecorder) UpdateActor(ctx, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockRepository)(nil).UpdateActor), ctx, actor)
}
